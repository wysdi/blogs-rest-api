<?php

namespace Tests\Feature;

use App\Models\Post;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PostTest extends TestCase
{
    use RefreshDatabase;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        // now re-register all the roles and permissions (clears cache and reloads relations)
        $this->seed();
    }
    /**
     * @return void
     */
    public function testGetPosts(): void
    {
        //User Role
        $user = User::firstWhere('email', 'user1@example.com');
        $userPosts = Post::Where('user_id', $user->id)->count();
        $response = $this->actingAs($user, 'web')->getJson('/api/posts',);
        $response->assertStatus(200);
        $response->assertJsonCount($userPosts, 'data');

        //Role Manager
        $this->app->get('auth')->forgetGuards();
        $manager = User::firstWhere('email', 'manager@example.com');
        $response = $this->actingAs($manager, 'web')->getJson('/api/posts',);
        $response->assertStatus(200);
        $response->assertJsonCount(Post::count(), 'data');
    }


    /**
     * @return void
     */
    public function testGetPostDetail(): void
    {
        $user = User::firstWhere('email', 'user1@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $response = $this->actingAs($user, 'web')->getJson('/api/posts/'.$post->id,);
        $response->assertStatus(200);

        //Role Manager
        $this->app->get('auth')->forgetGuards();
        $user = User::firstWhere('email', 'user1@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $manager = User::firstWhere('email', 'manager@example.com');
        $response = $this->actingAs($manager, 'web')->getJson('/api/posts/'.$post->id,);
        $response->assertStatus(200);
    }

    /**
     * @return void
     */
    public function testUserNotAllowToViewAnotherUserPost(): void
    {
        $user = User::firstWhere('email', 'user1@example.com');
        $user2 = User::firstWhere('email', 'user2@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $response = $this->actingAs($user2, 'web')->getJson('/api/posts/'.$post->id,);
        $response->assertStatus(404);
        $response->assertJson(['message' => 'You dont have access to view the post']);
    }


    /**
     * @return void
     */
    public function testCreatePost(): void
    {
        //Role User
        $data = [
            'title' => "New Post",
            'description' => "This is a post",
        ];
        $user = User::firstWhere('email', 'user1@example.com');
        $response = $this->actingAs($user, 'web')->postJson('/api/posts',$data);
        $response->assertStatus(200);
        $response->assertJson(['data' => $data]);

        //Role Manager
        $this->app->get('auth')->forgetGuards();
        $user = User::firstWhere('email', 'manager@example.com');
        $response = $this->actingAs($user, 'web')->postJson('/api/posts',$data);
        $response->assertStatus(200);
        $response->assertJson(['data' => $data]);
    }



    /**
     * @return void
     */
    public function testUpdatePost(): void
    {
        $data = [
            'title' => "New Post Updated",
            'description' => "This is a post",
        ];
        $user = User::firstWhere('email', 'user1@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $response = $this->actingAs($user, 'web')->putJson('/api/posts/'.$post->id, $data);
        $response->assertStatus(200);
        $response->assertJson(['data' => $data]);

        //Role Manager
        $this->app->get('auth')->forgetGuards();
        $user = User::firstWhere('email', 'user1@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $manager = User::firstWhere('email', 'manager@example.com');

        $response = $this->actingAs($manager, 'web')->putJson('/api/posts/'.$post->id, $data);
        $response->assertStatus(200);
        $response->assertJson(['data' => $data]);
    }

    /**
     * @return void
     */
    public function testUserNotAllowToUpdateAnotherUserPost(): void
    {
        $data = [
            'title' => "New Post Updated",
            'description' => "This is a post",
        ];
        $user = User::firstWhere('email', 'user1@example.com');
        $user2 = User::firstWhere('email', 'user2@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $response = $this->actingAs($user2, 'web')->putJson('/api/posts/'.$post->id, $data);
        $response->assertStatus(404);
        $response->assertJson(['message' => 'You dont have access to modify the  post']);

    }




    /**
     * @return void
     */
    public function testDeletePost(): void
    {
        $user = User::firstWhere('email', 'user1@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $response = $this->actingAs($user, 'web')->deleteJson('/api/posts/'.$post->id);
        $response->assertStatus(200);

        //Role Manager
        $this->app->get('auth')->forgetGuards();
        $user = User::firstWhere('email', 'user1@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $manager = User::firstWhere('email', 'manager@example.com');
        $response = $this->actingAs($manager, 'web')->deleteJson('/api/posts/'.$post->id);
        $response->assertStatus(200);
    }

    /**
     * @return void
     */
    public function testUserNotAllowToDeleteAnotherUserPost(): void
    {
        $user = User::firstWhere('email', 'user1@example.com');
        $user2 = User::firstWhere('email', 'user2@example.com');
        $post = Post::firstWhere('user_id', $user->id);
        $response = $this->actingAs($user2, 'web')->deleteJson('/api/posts/'.$post->id);
        $response->assertStatus(404);
        $response->assertJson(['message' => 'You dont have access to delete this post']);

    }





}
